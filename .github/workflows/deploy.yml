name: Deploy to OCI

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  INSTANCE_IP: 137.131.166.12
  APP_NAME: flask-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        python -m pytest --cov=. --cov-report=term-missing || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.INSTANCE_IP }} >> ~/.ssh/known_hosts
    
    - name: Create backup on server
      run: |
        ssh ubuntu@${{ env.INSTANCE_IP }} << 'EOF'
          set -e
          BACKUP_DIR="/home/ubuntu/backups"
          APP_DIR="/home/ubuntu/flask-app"
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          mkdir -p $BACKUP_DIR
          
          if [ -d "$APP_DIR" ]; then
            echo "Creating backup..."
            tar -czf "$BACKUP_DIR/backup_$TIMESTAMP.tar.gz" -C /home/ubuntu flask-app
            echo "Backup created: $BACKUP_DIR/backup_$TIMESTAMP.tar.gz"
            
            # Keep only last 5 backups
            cd $BACKUP_DIR
            ls -t backup_*.tar.gz | tail -n +6 | xargs -r rm
          fi
        EOF
    
    - name: Deploy application
      run: |
        # Copy files to server
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.env' \
          --exclude='venv' \
          ./ ubuntu@${{ env.INSTANCE_IP }}:/home/ubuntu/flask-app/
        
        # Setup and restart application
        ssh ubuntu@${{ env.INSTANCE_IP }} << 'EOF'
          set -e
          cd /home/ubuntu/flask-app
          
          # Install Python and dependencies
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-venv nginx
          
          # Create virtual environment
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Create systemd service
          sudo tee /etc/systemd/system/flask-app.service > /dev/null << 'SERVICE'
          [Unit]
          Description=Flask App
          After=network.target
          
          [Service]
          User=ubuntu
          WorkingDirectory=/home/ubuntu/flask-app
          Environment="PATH=/home/ubuntu/flask-app/venv/bin"
          ExecStart=/home/ubuntu/flask-app/venv/bin/gunicorn --bind 127.0.0.1:8080 --workers 2 --threads 4 app:app
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          SERVICE
          
          # Configure Nginx
          sudo tee /etc/nginx/sites-available/flask-app > /dev/null << 'NGINX'
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://127.0.0.1:8080;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          NGINX
          
          # Enable site
          sudo ln -sf /etc/nginx/sites-available/flask-app /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Restart services
          sudo systemctl daemon-reload
          sudo systemctl enable flask-app
          sudo systemctl restart flask-app
          sudo nginx -t
          sudo systemctl restart nginx
        EOF
    
    - name: Verify deployment
      run: |
        sleep 10
        curl -f http://${{ env.INSTANCE_IP }}/api/health || exit 1
    
    - name: Send Discord notification - Success
      if: success()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ ! -z "$DISCORD_WEBHOOK" ]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "✅ **Deploy Successful!**",
                 "embeds": [{
                   "title": "Flask App Deployed",
                   "color": 3066993,
                   "fields": [
                     {"name": "Repository", "value": "${{ github.repository }}", "inline": true},
                     {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                     {"name": "Commit", "value": "${{ github.sha }}", "inline": false},
                     {"name": "Author", "value": "${{ github.actor }}", "inline": true},
                     {"name": "URL", "value": "http://${{ env.INSTANCE_IP }}", "inline": true}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               $DISCORD_WEBHOOK
        fi
    
    - name: Send Discord notification - Failure
      if: failure()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ ! -z "$DISCORD_WEBHOOK" ]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "❌ **Deploy Failed!**",
                 "embeds": [{
                   "title": "Flask App Deploy Failed",
                   "color": 15158332,
                   "fields": [
                     {"name": "Repository", "value": "${{ github.repository }}", "inline": true},
                     {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                     {"name": "Commit", "value": "${{ github.sha }}", "inline": false},
                     {"name": "Author", "value": "${{ github.actor }}", "inline": true}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               $DISCORD_WEBHOOK
        fi