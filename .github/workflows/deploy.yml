name: Deploy to OCI

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  INSTANCE_IP: 137.131.166.12
  APP_NAME: flask-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        python -m pytest --cov=. --cov-report=term-missing || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.INSTANCE_IP }} >> ~/.ssh/known_hosts
    
    - name: Create backup on server
      run: |
        ssh ubuntu@${{ env.INSTANCE_IP }} << 'EOF'
          set -e
          BACKUP_DIR="/home/ubuntu/backups"
          APP_DIR="/home/ubuntu/flask-app"
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          mkdir -p $BACKUP_DIR
          
          if [ -d "$APP_DIR" ]; then
            echo "Creating backup..."
            tar -czf "$BACKUP_DIR/backup_$TIMESTAMP.tar.gz" -C /home/ubuntu flask-app
            echo "Backup created: $BACKUP_DIR/backup_$TIMESTAMP.tar.gz"
            
            # Keep only last 5 backups
            cd $BACKUP_DIR
            ls -t backup_*.tar.gz | tail -n +6 | xargs -r rm
          fi
        EOF
    
    - name: Deploy application
      id: deploy
      run: |
        set -e
        
        # Copy files to server
        echo "üì¶ Copying files to server..."
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.env' \
          --exclude='venv' \
          --exclude='test_app.py' \
          ./ ubuntu@${{ env.INSTANCE_IP }}:/home/ubuntu/flask-app/
        
        # Update application and restart
        echo "üîß Updating application..."
        ssh ubuntu@${{ env.INSTANCE_IP }} 'bash -s' << 'EOF'
          set -e
          cd /home/ubuntu/flask-app
          
          # Update virtual environment and dependencies
          echo "üì¶ Installing dependencies..."
          source venv/bin/activate
          pip install --quiet --upgrade pip
          pip install --quiet -r requirements.txt
          
          # Restart application
          echo "üîÑ Restarting application..."
          sudo systemctl restart flask-app
          
          # Wait for service to start
          sleep 5
          
          # Check service status
          if ! sudo systemctl is-active --quiet flask-app; then
            echo "‚ùå Flask service failed to start!"
            sudo journalctl -u flask-app -n 20 --no-pager
            exit 1
          fi
          
          # Check if nginx is running
          if ! sudo systemctl is-active --quiet nginx; then
            echo "‚ö†Ô∏è Nginx is not running, starting it..."
            sudo systemctl start nginx
          fi
          
          echo "‚úÖ Application deployed successfully!"
        EOF
    
    - name: Verify deployment
      id: verify
      run: |
        echo "‚è≥ Waiting for application to be ready..."
        sleep 10
        
        # Test health endpoint
        echo "üîç Testing health endpoint..."
        for i in {1..5}; do
          if curl -f -s http://${{ env.INSTANCE_IP }}/api/health; then
            echo "‚úÖ Health check passed!"
            break
          else
            echo "‚ö†Ô∏è Health check attempt $i failed, retrying..."
            sleep 5
          fi
          
          if [ $i -eq 5 ]; then
            echo "‚ùå Health check failed after 5 attempts!"
            echo "Checking application logs..."
            ssh ubuntu@${{ env.INSTANCE_IP }} "sudo journalctl -u flask-app -n 30 --no-pager"
            exit 1
          fi
        done
        
        # Test all endpoints
        echo "üîç Testing all endpoints..."
        endpoints=("/api/health" "/api/info" "/api/status")
        for endpoint in "${endpoints[@]}"; do
          echo "Testing $endpoint..."
          if ! curl -f -s http://${{ env.INSTANCE_IP }}$endpoint > /dev/null; then
            echo "‚ùå Endpoint $endpoint failed!"
            exit 1
          fi
        done
        
        echo "‚úÖ All endpoints verified successfully!"
    
    - name: Send Discord notification - Success
      if: success()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ ! -z "$DISCORD_WEBHOOK" ]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "‚úÖ **Deploy Successful!**",
                 "embeds": [{
                   "title": "Flask App Deployed",
                   "color": 3066993,
                   "fields": [
                     {"name": "Repository", "value": "${{ github.repository }}", "inline": true},
                     {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                     {"name": "Commit", "value": "${{ github.sha }}", "inline": false},
                     {"name": "Author", "value": "${{ github.actor }}", "inline": true},
                     {"name": "URL", "value": "http://${{ env.INSTANCE_IP }}", "inline": true}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               $DISCORD_WEBHOOK
        fi
    
    - name: Send Discord notification - Failure
      if: failure()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ ! -z "$DISCORD_WEBHOOK" ]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "‚ùå **Deploy Failed!**",
                 "embeds": [{
                   "title": "Flask App Deploy Failed",
                   "color": 15158332,
                   "fields": [
                     {"name": "Repository", "value": "${{ github.repository }}", "inline": true},
                     {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                     {"name": "Commit", "value": "${{ github.sha }}", "inline": false},
                     {"name": "Author", "value": "${{ github.actor }}", "inline": true}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               $DISCORD_WEBHOOK
        fi